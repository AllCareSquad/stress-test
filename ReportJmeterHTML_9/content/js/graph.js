/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 91.0, "minX": 0.0, "maxY": 60381.0, "series": [{"data": [[0.0, 91.0], [0.1, 95.0], [0.2, 96.0], [0.3, 97.0], [0.4, 97.0], [0.5, 97.0], [0.6, 98.0], [0.7, 98.0], [0.8, 98.0], [0.9, 99.0], [1.0, 99.0], [1.1, 99.0], [1.2, 99.0], [1.3, 99.0], [1.4, 100.0], [1.5, 100.0], [1.6, 100.0], [1.7, 100.0], [1.8, 100.0], [1.9, 100.0], [2.0, 100.0], [2.1, 100.0], [2.2, 101.0], [2.3, 101.0], [2.4, 101.0], [2.5, 101.0], [2.6, 101.0], [2.7, 101.0], [2.8, 101.0], [2.9, 101.0], [3.0, 101.0], [3.1, 102.0], [3.2, 102.0], [3.3, 102.0], [3.4, 102.0], [3.5, 102.0], [3.6, 102.0], [3.7, 102.0], [3.8, 102.0], [3.9, 102.0], [4.0, 102.0], [4.1, 102.0], [4.2, 102.0], [4.3, 102.0], [4.4, 103.0], [4.5, 103.0], [4.6, 103.0], [4.7, 103.0], [4.8, 103.0], [4.9, 103.0], [5.0, 103.0], [5.1, 103.0], [5.2, 103.0], [5.3, 103.0], [5.4, 103.0], [5.5, 103.0], [5.6, 103.0], [5.7, 103.0], [5.8, 103.0], [5.9, 103.0], [6.0, 104.0], [6.1, 104.0], [6.2, 104.0], [6.3, 104.0], [6.4, 104.0], [6.5, 104.0], [6.6, 104.0], [6.7, 104.0], [6.8, 104.0], [6.9, 104.0], [7.0, 104.0], [7.1, 104.0], [7.2, 104.0], [7.3, 104.0], [7.4, 104.0], [7.5, 104.0], [7.6, 104.0], [7.7, 104.0], [7.8, 105.0], [7.9, 105.0], [8.0, 105.0], [8.1, 105.0], [8.2, 105.0], [8.3, 105.0], [8.4, 105.0], [8.5, 105.0], [8.6, 105.0], [8.7, 105.0], [8.8, 105.0], [8.9, 105.0], [9.0, 105.0], [9.1, 105.0], [9.2, 105.0], [9.3, 105.0], [9.4, 105.0], [9.5, 105.0], [9.6, 105.0], [9.7, 105.0], [9.8, 105.0], [9.9, 105.0], [10.0, 106.0], [10.1, 106.0], [10.2, 106.0], [10.3, 106.0], [10.4, 106.0], [10.5, 106.0], [10.6, 106.0], [10.7, 106.0], [10.8, 106.0], [10.9, 106.0], [11.0, 106.0], [11.1, 106.0], [11.2, 106.0], [11.3, 106.0], [11.4, 106.0], [11.5, 106.0], [11.6, 106.0], [11.7, 106.0], [11.8, 106.0], [11.9, 106.0], [12.0, 106.0], [12.1, 106.0], [12.2, 106.0], [12.3, 106.0], [12.4, 106.0], [12.5, 107.0], [12.6, 107.0], [12.7, 107.0], [12.8, 107.0], [12.9, 107.0], [13.0, 107.0], [13.1, 107.0], [13.2, 107.0], [13.3, 107.0], [13.4, 107.0], [13.5, 107.0], [13.6, 107.0], [13.7, 107.0], [13.8, 107.0], [13.9, 107.0], [14.0, 107.0], [14.1, 107.0], [14.2, 107.0], [14.3, 107.0], [14.4, 107.0], [14.5, 107.0], [14.6, 107.0], [14.7, 107.0], [14.8, 107.0], [14.9, 107.0], [15.0, 107.0], [15.1, 107.0], [15.2, 108.0], [15.3, 108.0], [15.4, 108.0], [15.5, 108.0], [15.6, 108.0], [15.7, 108.0], [15.8, 108.0], [15.9, 108.0], [16.0, 108.0], [16.1, 108.0], [16.2, 108.0], [16.3, 108.0], [16.4, 108.0], [16.5, 108.0], [16.6, 108.0], [16.7, 108.0], [16.8, 108.0], [16.9, 108.0], [17.0, 108.0], [17.1, 108.0], [17.2, 108.0], [17.3, 108.0], [17.4, 108.0], [17.5, 108.0], [17.6, 108.0], [17.7, 108.0], [17.8, 108.0], [17.9, 108.0], [18.0, 108.0], [18.1, 109.0], [18.2, 109.0], [18.3, 109.0], [18.4, 109.0], [18.5, 109.0], [18.6, 109.0], [18.7, 109.0], [18.8, 109.0], [18.9, 109.0], [19.0, 109.0], [19.1, 109.0], [19.2, 109.0], [19.3, 109.0], [19.4, 109.0], [19.5, 109.0], [19.6, 109.0], [19.7, 109.0], [19.8, 109.0], [19.9, 109.0], [20.0, 109.0], [20.1, 109.0], [20.2, 109.0], [20.3, 109.0], [20.4, 109.0], [20.5, 109.0], [20.6, 109.0], [20.7, 109.0], [20.8, 109.0], [20.9, 109.0], [21.0, 109.0], [21.1, 109.0], [21.2, 110.0], [21.3, 110.0], [21.4, 110.0], [21.5, 110.0], [21.6, 110.0], [21.7, 110.0], [21.8, 110.0], [21.9, 110.0], [22.0, 110.0], [22.1, 110.0], [22.2, 110.0], [22.3, 110.0], [22.4, 110.0], [22.5, 110.0], [22.6, 110.0], [22.7, 110.0], [22.8, 110.0], [22.9, 110.0], [23.0, 110.0], [23.1, 110.0], [23.2, 110.0], [23.3, 110.0], [23.4, 110.0], [23.5, 110.0], [23.6, 110.0], [23.7, 110.0], [23.8, 110.0], [23.9, 110.0], [24.0, 110.0], [24.1, 110.0], [24.2, 110.0], [24.3, 110.0], [24.4, 111.0], [24.5, 111.0], [24.6, 111.0], [24.7, 111.0], [24.8, 111.0], [24.9, 111.0], [25.0, 111.0], [25.1, 111.0], [25.2, 111.0], [25.3, 111.0], [25.4, 111.0], [25.5, 111.0], [25.6, 111.0], [25.7, 111.0], [25.8, 111.0], [25.9, 111.0], [26.0, 111.0], [26.1, 111.0], [26.2, 111.0], [26.3, 111.0], [26.4, 111.0], [26.5, 111.0], [26.6, 111.0], [26.7, 111.0], [26.8, 111.0], [26.9, 111.0], [27.0, 111.0], [27.1, 111.0], [27.2, 111.0], [27.3, 111.0], [27.4, 111.0], [27.5, 111.0], [27.6, 112.0], [27.7, 112.0], [27.8, 112.0], [27.9, 112.0], [28.0, 112.0], [28.1, 112.0], [28.2, 112.0], [28.3, 112.0], [28.4, 112.0], [28.5, 112.0], [28.6, 112.0], [28.7, 112.0], [28.8, 112.0], [28.9, 112.0], [29.0, 112.0], [29.1, 112.0], [29.2, 112.0], [29.3, 112.0], [29.4, 112.0], [29.5, 112.0], [29.6, 112.0], [29.7, 112.0], [29.8, 112.0], [29.9, 112.0], [30.0, 112.0], [30.1, 112.0], [30.2, 112.0], [30.3, 112.0], [30.4, 112.0], [30.5, 112.0], [30.6, 112.0], [30.7, 112.0], [30.8, 112.0], [30.9, 113.0], [31.0, 113.0], [31.1, 113.0], [31.2, 113.0], [31.3, 113.0], [31.4, 113.0], [31.5, 113.0], [31.6, 113.0], [31.7, 113.0], [31.8, 113.0], [31.9, 113.0], [32.0, 113.0], [32.1, 113.0], [32.2, 113.0], [32.3, 113.0], [32.4, 113.0], [32.5, 113.0], [32.6, 113.0], [32.7, 113.0], [32.8, 113.0], [32.9, 113.0], [33.0, 113.0], [33.1, 113.0], [33.2, 113.0], [33.3, 113.0], [33.4, 113.0], [33.5, 113.0], [33.6, 113.0], [33.7, 113.0], [33.8, 113.0], [33.9, 113.0], [34.0, 113.0], [34.1, 114.0], [34.2, 114.0], [34.3, 114.0], [34.4, 114.0], [34.5, 114.0], [34.6, 114.0], [34.7, 114.0], [34.8, 114.0], [34.9, 114.0], [35.0, 114.0], [35.1, 114.0], [35.2, 114.0], [35.3, 114.0], [35.4, 114.0], [35.5, 114.0], [35.6, 114.0], [35.7, 114.0], [35.8, 114.0], [35.9, 114.0], [36.0, 114.0], [36.1, 114.0], [36.2, 114.0], [36.3, 114.0], [36.4, 114.0], [36.5, 114.0], [36.6, 114.0], [36.7, 114.0], [36.8, 114.0], [36.9, 114.0], [37.0, 114.0], [37.1, 114.0], [37.2, 115.0], [37.3, 115.0], [37.4, 115.0], [37.5, 115.0], [37.6, 115.0], [37.7, 115.0], [37.8, 115.0], [37.9, 115.0], [38.0, 115.0], [38.1, 115.0], [38.2, 115.0], [38.3, 115.0], [38.4, 115.0], [38.5, 115.0], [38.6, 115.0], [38.7, 115.0], [38.8, 115.0], [38.9, 115.0], [39.0, 115.0], [39.1, 115.0], [39.2, 115.0], [39.3, 115.0], [39.4, 115.0], [39.5, 115.0], [39.6, 115.0], [39.7, 115.0], [39.8, 115.0], [39.9, 115.0], [40.0, 115.0], [40.1, 116.0], [40.2, 116.0], [40.3, 116.0], [40.4, 116.0], [40.5, 116.0], [40.6, 116.0], [40.7, 116.0], [40.8, 116.0], [40.9, 116.0], [41.0, 116.0], [41.1, 116.0], [41.2, 116.0], [41.3, 116.0], [41.4, 116.0], [41.5, 116.0], [41.6, 116.0], [41.7, 116.0], [41.8, 116.0], [41.9, 116.0], [42.0, 116.0], [42.1, 116.0], [42.2, 116.0], [42.3, 116.0], [42.4, 116.0], [42.5, 116.0], [42.6, 116.0], [42.7, 116.0], [42.8, 116.0], [42.9, 117.0], [43.0, 117.0], [43.1, 117.0], [43.2, 117.0], [43.3, 117.0], [43.4, 117.0], [43.5, 117.0], [43.6, 117.0], [43.7, 117.0], [43.8, 117.0], [43.9, 117.0], [44.0, 117.0], [44.1, 117.0], [44.2, 117.0], [44.3, 117.0], [44.4, 117.0], [44.5, 117.0], [44.6, 117.0], [44.7, 117.0], [44.8, 117.0], [44.9, 117.0], [45.0, 117.0], [45.1, 117.0], [45.2, 117.0], [45.3, 117.0], [45.4, 117.0], [45.5, 117.0], [45.6, 117.0], [45.7, 118.0], [45.8, 118.0], [45.9, 118.0], [46.0, 118.0], [46.1, 118.0], [46.2, 118.0], [46.3, 118.0], [46.4, 118.0], [46.5, 118.0], [46.6, 118.0], [46.7, 118.0], [46.8, 118.0], [46.9, 118.0], [47.0, 118.0], [47.1, 118.0], [47.2, 118.0], [47.3, 118.0], [47.4, 118.0], [47.5, 118.0], [47.6, 118.0], [47.7, 118.0], [47.8, 118.0], [47.9, 118.0], [48.0, 118.0], [48.1, 118.0], [48.2, 118.0], [48.3, 118.0], [48.4, 119.0], [48.5, 119.0], [48.6, 119.0], [48.7, 119.0], [48.8, 119.0], [48.9, 119.0], [49.0, 119.0], [49.1, 119.0], [49.2, 119.0], [49.3, 119.0], [49.4, 119.0], [49.5, 119.0], [49.6, 119.0], [49.7, 119.0], [49.8, 119.0], [49.9, 119.0], [50.0, 119.0], [50.1, 119.0], [50.2, 119.0], [50.3, 119.0], [50.4, 119.0], [50.5, 119.0], [50.6, 119.0], [50.7, 119.0], [50.8, 120.0], [50.9, 120.0], [51.0, 120.0], [51.1, 120.0], [51.2, 120.0], [51.3, 120.0], [51.4, 120.0], [51.5, 120.0], [51.6, 120.0], [51.7, 120.0], [51.8, 120.0], [51.9, 120.0], [52.0, 120.0], [52.1, 120.0], [52.2, 120.0], [52.3, 120.0], [52.4, 120.0], [52.5, 120.0], [52.6, 120.0], [52.7, 120.0], [52.8, 120.0], [52.9, 120.0], [53.0, 120.0], [53.1, 121.0], [53.2, 121.0], [53.3, 121.0], [53.4, 121.0], [53.5, 121.0], [53.6, 121.0], [53.7, 121.0], [53.8, 121.0], [53.9, 121.0], [54.0, 121.0], [54.1, 121.0], [54.2, 121.0], [54.3, 121.0], [54.4, 121.0], [54.5, 121.0], [54.6, 121.0], [54.7, 121.0], [54.8, 121.0], [54.9, 121.0], [55.0, 121.0], [55.1, 122.0], [55.2, 122.0], [55.3, 122.0], [55.4, 122.0], [55.5, 122.0], [55.6, 122.0], [55.7, 122.0], [55.8, 122.0], [55.9, 122.0], [56.0, 122.0], [56.1, 122.0], [56.2, 122.0], [56.3, 122.0], [56.4, 122.0], [56.5, 122.0], [56.6, 122.0], [56.7, 122.0], [56.8, 122.0], [56.9, 122.0], [57.0, 123.0], [57.1, 123.0], [57.2, 123.0], [57.3, 123.0], [57.4, 123.0], [57.5, 123.0], [57.6, 123.0], [57.7, 123.0], [57.8, 123.0], [57.9, 123.0], [58.0, 123.0], [58.1, 123.0], [58.2, 123.0], [58.3, 123.0], [58.4, 123.0], [58.5, 123.0], [58.6, 123.0], [58.7, 123.0], [58.8, 123.0], [58.9, 124.0], [59.0, 124.0], [59.1, 124.0], [59.2, 124.0], [59.3, 124.0], [59.4, 124.0], [59.5, 124.0], [59.6, 124.0], [59.7, 124.0], [59.8, 124.0], [59.9, 124.0], [60.0, 124.0], [60.1, 124.0], [60.2, 124.0], [60.3, 124.0], [60.4, 124.0], [60.5, 125.0], [60.6, 125.0], [60.7, 125.0], [60.8, 125.0], [60.9, 125.0], [61.0, 125.0], [61.1, 125.0], [61.2, 125.0], [61.3, 125.0], [61.4, 125.0], [61.5, 125.0], [61.6, 125.0], [61.7, 125.0], [61.8, 125.0], [61.9, 125.0], [62.0, 126.0], [62.1, 126.0], [62.2, 126.0], [62.3, 126.0], [62.4, 126.0], [62.5, 126.0], [62.6, 126.0], [62.7, 126.0], [62.8, 126.0], [62.9, 126.0], [63.0, 126.0], [63.1, 126.0], [63.2, 126.0], [63.3, 127.0], [63.4, 127.0], [63.5, 127.0], [63.6, 127.0], [63.7, 127.0], [63.8, 127.0], [63.9, 127.0], [64.0, 127.0], [64.1, 127.0], [64.2, 127.0], [64.3, 127.0], [64.4, 127.0], [64.5, 128.0], [64.6, 128.0], [64.7, 128.0], [64.8, 128.0], [64.9, 128.0], [65.0, 128.0], [65.1, 128.0], [65.2, 128.0], [65.3, 128.0], [65.4, 128.0], [65.5, 128.0], [65.6, 129.0], [65.7, 129.0], [65.8, 129.0], [65.9, 129.0], [66.0, 129.0], [66.1, 129.0], [66.2, 129.0], [66.3, 129.0], [66.4, 129.0], [66.5, 129.0], [66.6, 130.0], [66.7, 130.0], [66.8, 130.0], [66.9, 130.0], [67.0, 130.0], [67.1, 130.0], [67.2, 130.0], [67.3, 130.0], [67.4, 130.0], [67.5, 131.0], [67.6, 131.0], [67.7, 131.0], [67.8, 131.0], [67.9, 131.0], [68.0, 131.0], [68.1, 131.0], [68.2, 131.0], [68.3, 132.0], [68.4, 132.0], [68.5, 132.0], [68.6, 132.0], [68.7, 132.0], [68.8, 132.0], [68.9, 132.0], [69.0, 133.0], [69.1, 133.0], [69.2, 133.0], [69.3, 133.0], [69.4, 133.0], [69.5, 133.0], [69.6, 133.0], [69.7, 134.0], [69.8, 134.0], [69.9, 134.0], [70.0, 134.0], [70.1, 134.0], [70.2, 134.0], [70.3, 134.0], [70.4, 135.0], [70.5, 135.0], [70.6, 135.0], [70.7, 135.0], [70.8, 135.0], [70.9, 135.0], [71.0, 136.0], [71.1, 136.0], [71.2, 136.0], [71.3, 136.0], [71.4, 136.0], [71.5, 137.0], [71.6, 137.0], [71.7, 137.0], [71.8, 137.0], [71.9, 137.0], [72.0, 137.0], [72.1, 138.0], [72.2, 138.0], [72.3, 138.0], [72.4, 138.0], [72.5, 139.0], [72.6, 139.0], [72.7, 139.0], [72.8, 139.0], [72.9, 139.0], [73.0, 140.0], [73.1, 140.0], [73.2, 140.0], [73.3, 140.0], [73.4, 141.0], [73.5, 141.0], [73.6, 141.0], [73.7, 141.0], [73.8, 141.0], [73.9, 142.0], [74.0, 142.0], [74.1, 142.0], [74.2, 142.0], [74.3, 143.0], [74.4, 143.0], [74.5, 143.0], [74.6, 144.0], [74.7, 144.0], [74.8, 144.0], [74.9, 144.0], [75.0, 145.0], [75.1, 145.0], [75.2, 145.0], [75.3, 145.0], [75.4, 146.0], [75.5, 146.0], [75.6, 146.0], [75.7, 147.0], [75.8, 147.0], [75.9, 147.0], [76.0, 148.0], [76.1, 148.0], [76.2, 148.0], [76.3, 149.0], [76.4, 149.0], [76.5, 149.0], [76.6, 150.0], [76.7, 150.0], [76.8, 150.0], [76.9, 151.0], [77.0, 151.0], [77.1, 152.0], [77.2, 152.0], [77.3, 153.0], [77.4, 153.0], [77.5, 153.0], [77.6, 154.0], [77.7, 154.0], [77.8, 154.0], [77.9, 155.0], [78.0, 155.0], [78.1, 156.0], [78.2, 156.0], [78.3, 157.0], [78.4, 157.0], [78.5, 158.0], [78.6, 158.0], [78.7, 158.0], [78.8, 159.0], [78.9, 159.0], [79.0, 160.0], [79.1, 160.0], [79.2, 161.0], [79.3, 161.0], [79.4, 162.0], [79.5, 162.0], [79.6, 163.0], [79.7, 164.0], [79.8, 164.0], [79.9, 165.0], [80.0, 165.0], [80.1, 166.0], [80.2, 166.0], [80.3, 167.0], [80.4, 168.0], [80.5, 168.0], [80.6, 169.0], [80.7, 170.0], [80.8, 170.0], [80.9, 171.0], [81.0, 171.0], [81.1, 172.0], [81.2, 173.0], [81.3, 173.0], [81.4, 174.0], [81.5, 175.0], [81.6, 175.0], [81.7, 176.0], [81.8, 177.0], [81.9, 178.0], [82.0, 178.0], [82.1, 179.0], [82.2, 180.0], [82.3, 180.0], [82.4, 181.0], [82.5, 182.0], [82.6, 182.0], [82.7, 183.0], [82.8, 184.0], [82.9, 184.0], [83.0, 185.0], [83.1, 186.0], [83.2, 187.0], [83.3, 187.0], [83.4, 188.0], [83.5, 189.0], [83.6, 189.0], [83.7, 190.0], [83.8, 191.0], [83.9, 191.0], [84.0, 192.0], [84.1, 193.0], [84.2, 194.0], [84.3, 194.0], [84.4, 195.0], [84.5, 196.0], [84.6, 197.0], [84.7, 198.0], [84.8, 198.0], [84.9, 199.0], [85.0, 200.0], [85.1, 201.0], [85.2, 202.0], [85.3, 203.0], [85.4, 203.0], [85.5, 204.0], [85.6, 205.0], [85.7, 206.0], [85.8, 207.0], [85.9, 208.0], [86.0, 209.0], [86.1, 210.0], [86.2, 211.0], [86.3, 212.0], [86.4, 213.0], [86.5, 214.0], [86.6, 215.0], [86.7, 216.0], [86.8, 217.0], [86.9, 218.0], [87.0, 219.0], [87.1, 221.0], [87.2, 222.0], [87.3, 223.0], [87.4, 224.0], [87.5, 226.0], [87.6, 227.0], [87.7, 228.0], [87.8, 229.0], [87.9, 231.0], [88.0, 232.0], [88.1, 234.0], [88.2, 235.0], [88.3, 236.0], [88.4, 238.0], [88.5, 240.0], [88.6, 241.0], [88.7, 243.0], [88.8, 245.0], [88.9, 246.0], [89.0, 248.0], [89.1, 249.0], [89.2, 251.0], [89.3, 252.0], [89.4, 254.0], [89.5, 256.0], [89.6, 258.0], [89.7, 259.0], [89.8, 261.0], [89.9, 263.0], [90.0, 264.0], [90.1, 266.0], [90.2, 268.0], [90.3, 270.0], [90.4, 272.0], [90.5, 274.0], [90.6, 277.0], [90.7, 279.0], [90.8, 281.0], [90.9, 283.0], [91.0, 286.0], [91.1, 288.0], [91.2, 291.0], [91.3, 293.0], [91.4, 295.0], [91.5, 297.0], [91.6, 300.0], [91.7, 302.0], [91.8, 305.0], [91.9, 307.0], [92.0, 310.0], [92.1, 313.0], [92.2, 316.0], [92.3, 319.0], [92.4, 322.0], [92.5, 326.0], [92.6, 329.0], [92.7, 332.0], [92.8, 335.0], [92.9, 338.0], [93.0, 342.0], [93.1, 345.0], [93.2, 349.0], [93.3, 353.0], [93.4, 357.0], [93.5, 362.0], [93.6, 366.0], [93.7, 371.0], [93.8, 376.0], [93.9, 381.0], [94.0, 386.0], [94.1, 391.0], [94.2, 397.0], [94.3, 402.0], [94.4, 409.0], [94.5, 415.0], [94.6, 420.0], [94.7, 427.0], [94.8, 434.0], [94.9, 442.0], [95.0, 450.0], [95.1, 459.0], [95.2, 468.0], [95.3, 478.0], [95.4, 487.0], [95.5, 500.0], [95.6, 510.0], [95.7, 523.0], [95.8, 537.0], [95.9, 549.0], [96.0, 562.0], [96.1, 576.0], [96.2, 593.0], [96.3, 612.0], [96.4, 632.0], [96.5, 649.0], [96.6, 670.0], [96.7, 690.0], [96.8, 724.0], [96.9, 756.0], [97.0, 797.0], [97.1, 841.0], [97.2, 885.0], [97.3, 938.0], [97.4, 998.0], [97.5, 1045.0], [97.6, 1080.0], [97.7, 1111.0], [97.8, 1144.0], [97.9, 1198.0], [98.0, 1249.0], [98.1, 1292.0], [98.2, 1380.0], [98.3, 1485.0], [98.4, 1565.0], [98.5, 1753.0], [98.6, 1964.0], [98.7, 2077.0], [98.8, 2363.0], [98.9, 2726.0], [99.0, 3039.0], [99.1, 3466.0], [99.2, 3956.0], [99.3, 4369.0], [99.4, 4785.0], [99.5, 5089.0], [99.6, 5421.0], [99.7, 5971.0], [99.8, 6535.0], [99.9, 7618.0], [100.0, 60381.0]], "isOverall": false, "label": "getProfile", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 83550.0, "series": [{"data": [[0.0, 1395.0], [100.0, 83550.0], [200.0, 6638.0], [60300.0, 1.0], [300.0, 2667.0], [400.0, 1249.0], [500.0, 739.0], [600.0, 495.0], [700.0, 273.0], [800.0, 222.0], [900.0, 174.0], [1000.0, 263.0], [1100.0, 235.0], [1200.0, 210.0], [1300.0, 105.0], [1400.0, 99.0], [1500.0, 120.0], [1600.0, 43.0], [1700.0, 46.0], [1800.0, 39.0], [1900.0, 62.0], [2000.0, 96.0], [2100.0, 29.0], [2300.0, 24.0], [2200.0, 30.0], [2400.0, 31.0], [2500.0, 37.0], [2600.0, 24.0], [2800.0, 33.0], [2700.0, 26.0], [2900.0, 34.0], [3000.0, 23.0], [3100.0, 25.0], [3300.0, 26.0], [3200.0, 24.0], [3400.0, 20.0], [3500.0, 15.0], [3700.0, 24.0], [3600.0, 28.0], [3800.0, 13.0], [3900.0, 26.0], [4000.0, 29.0], [4300.0, 16.0], [4200.0, 26.0], [4100.0, 22.0], [4600.0, 26.0], [4500.0, 23.0], [4400.0, 20.0], [4800.0, 29.0], [4700.0, 30.0], [4900.0, 29.0], [5000.0, 40.0], [5100.0, 33.0], [5300.0, 33.0], [5200.0, 25.0], [5400.0, 19.0], [5600.0, 13.0], [5500.0, 16.0], [5700.0, 21.0], [5800.0, 21.0], [5900.0, 20.0], [6100.0, 16.0], [6000.0, 19.0], [6200.0, 15.0], [6300.0, 23.0], [6400.0, 18.0], [6600.0, 10.0], [6500.0, 16.0], [6900.0, 12.0], [6800.0, 9.0], [6700.0, 7.0], [7000.0, 6.0], [7100.0, 6.0], [7200.0, 10.0], [7400.0, 7.0], [7300.0, 11.0], [7500.0, 9.0], [7600.0, 11.0], [7800.0, 6.0], [7700.0, 8.0], [7900.0, 9.0], [8000.0, 8.0], [8100.0, 9.0], [8200.0, 12.0], [8400.0, 6.0], [8700.0, 5.0], [8500.0, 2.0], [8600.0, 4.0], [8300.0, 1.0], [8900.0, 2.0], [9100.0, 4.0], [9200.0, 1.0], [8800.0, 2.0], [9000.0, 1.0], [9300.0, 3.0], [9400.0, 3.0], [9500.0, 2.0], [9600.0, 3.0]], "isOverall": false, "label": "getProfile", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 589.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 2,000ms"], [1, "Requests having \nresponse time > 2,000ms and <= 4,000ms"], [2, "Requests having \nresponse time > 4,000ms"], [3, "Requests in error"]], "maxY": 98624.0, "series": [{"data": [[0.0, 98624.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 2,000ms", "isController": false}, {"data": [[1.0, 589.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 2,000ms and <= 4,000ms", "isController": false}, {"data": [[2.0, 787.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 4,000ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 12.292617897017147, "minX": 1.64091522E12, "maxY": 469.48340425531916, "series": [{"data": [[1.6409154E12, 16.916999999999934], [1.64091606E12, 14.71209596801064], [1.640916E12, 14.21364242828555], [1.6409157E12, 48.070833333333105], [1.64091612E12, 12.292617897017147], [1.64091582E12, 18.89666666666664], [1.64091576E12, 13.35239206534422], [1.64091546E12, 22.24070678446408], [1.64091588E12, 13.400233177881358], [1.64091558E12, 21.017499999999988], [1.64091552E12, 19.07140468227421], [1.64091618E12, 12.433527939949947], [1.64091522E12, 469.48340425531916], [1.64091564E12, 21.962618375145365], [1.64091534E12, 26.693551074820864], [1.64091624E12, 12.393745290128127], [1.64091528E12, 21.49611273080651], [1.64091594E12, 13.257790368271934]], "isOverall": false, "label": "Api CMS", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64091624E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 111.07027120700104, "minX": 1.0, "maxY": 9508.0, "series": [{"data": [[2.0, 169.0], [3.0, 129.2], [4.0, 121.63265306122447], [5.0, 115.54716981132071], [6.0, 114.43809523809527], [7.0, 114.14201183431952], [8.0, 113.97068965517244], [9.0, 114.27659574468088], [10.0, 111.88915566226494], [11.0, 111.07027120700104], [12.0, 115.05700689983314], [13.0, 125.95675351002312], [14.0, 130.06079664570228], [15.0, 140.66385896180185], [16.0, 149.13473538248195], [17.0, 155.06353734439745], [18.0, 164.80127462340678], [19.0, 170.83798219584585], [20.0, 178.81193300767652], [21.0, 187.66160977665342], [22.0, 200.68296614723266], [23.0, 208.9891672308735], [24.0, 209.36929824561417], [25.0, 233.93482905982884], [26.0, 232.64637002341902], [27.0, 244.50420168067222], [28.0, 266.6732673267329], [29.0, 266.33717105263185], [30.0, 261.894097222222], [31.0, 277.2380000000003], [33.0, 273.00496277915636], [32.0, 261.6581986143185], [35.0, 300.07468879668056], [34.0, 289.1071428571431], [37.0, 293.1913875598087], [36.0, 290.3228699551569], [39.0, 348.85227272727275], [38.0, 311.47222222222223], [41.0, 405.98260869565223], [40.0, 346.9668874172184], [43.0, 358.4135338345864], [42.0, 370.63779527559035], [45.0, 361.0], [44.0, 394.05384615384617], [47.0, 469.7848101265823], [46.0, 466.91025641025647], [49.0, 414.5185185185184], [48.0, 420.66037735849056], [51.0, 482.06451612903214], [50.0, 368.46], [53.0, 398.39024390243907], [52.0, 474.99999999999994], [55.0, 489.8076923076924], [54.0, 487.29787234042556], [57.0, 502.1111111111111], [56.0, 445.90909090909105], [59.0, 490.89795918367344], [58.0, 533.9761904761904], [61.0, 431.59459459459464], [60.0, 559.3095238095239], [63.0, 582.8064516129032], [62.0, 470.3], [67.0, 449.3928571428571], [66.0, 503.0869565217392], [65.0, 461.0], [64.0, 530.4651162790699], [71.0, 506.10526315789485], [70.0, 596.181818181818], [69.0, 494.54999999999995], [68.0, 528.0952380952381], [75.0, 710.7931034482758], [74.0, 651.7500000000001], [73.0, 634.5000000000002], [72.0, 403.88235294117646], [79.0, 534.6774193548388], [78.0, 449.83333333333337], [77.0, 389.1851851851851], [76.0, 625.0000000000001], [83.0, 666.1111111111112], [82.0, 582.9166666666664], [81.0, 489.1944444444444], [80.0, 541.5882352941177], [87.0, 1100.0555555555557], [86.0, 758.2142857142857], [85.0, 539.4736842105262], [84.0, 607.8124999999999], [91.0, 794.5833333333333], [90.0, 689.9999999999999], [89.0, 610.75], [88.0, 759.5], [95.0, 765.7142857142857], [94.0, 980.8], [93.0, 816.0666666666665], [92.0, 775.7647058823529], [99.0, 863.7391304347825], [98.0, 717.8823529411765], [97.0, 708.9999999999999], [96.0, 845.2352941176471], [103.0, 880.2173913043476], [102.0, 838.8571428571428], [101.0, 625.7647058823528], [100.0, 780.5238095238096], [107.0, 972.6842105263157], [106.0, 740.2380952380953], [105.0, 916.2173913043479], [104.0, 803.2777777777778], [111.0, 1017.0000000000001], [110.0, 1300.9444444444446], [109.0, 892.7777777777778], [108.0, 887.4444444444445], [115.0, 1249.9230769230771], [114.0, 1435.5], [113.0, 874.1666666666666], [112.0, 923.7222222222224], [119.0, 1170.9285714285713], [118.0, 1236.4], [117.0, 1027.0], [116.0, 1220.9230769230767], [123.0, 1048.375], [122.0, 1052.0588235294117], [121.0, 1204.5555555555557], [120.0, 1123.25], [127.0, 1439.0], [126.0, 1177.8999999999999], [125.0, 1408.3], [124.0, 762.0833333333334], [135.0, 1887.7777777777778], [134.0, 1507.2727272727273], [133.0, 1299.3333333333333], [132.0, 1033.5], [131.0, 1554.5], [130.0, 1225.0], [129.0, 1500.8000000000002], [128.0, 1580.857142857143], [143.0, 1292.4285714285713], [142.0, 1550.4166666666665], [141.0, 1586.4545454545455], [140.0, 1818.0909090909092], [139.0, 1636.6250000000002], [138.0, 1496.0], [137.0, 1586.4166666666665], [136.0, 1073.2857142857142], [151.0, 1699.6470588235293], [150.0, 1523.9444444444446], [149.0, 1491.9999999999998], [148.0, 1416.8125], [147.0, 1737.2666666666664], [146.0, 1301.6428571428573], [145.0, 1840.923076923077], [144.0, 1300.1176470588236], [159.0, 1159.3846153846155], [158.0, 2041.8], [157.0, 1473.1538461538462], [156.0, 1610.0714285714284], [155.0, 1448.5000000000002], [154.0, 1265.5384615384612], [153.0, 1913.4615384615383], [152.0, 1483.8823529411768], [167.0, 2121.2857142857147], [166.0, 1256.0], [165.0, 1504.75], [164.0, 1798.625], [163.0, 1517.4210526315787], [162.0, 1167.8333333333333], [161.0, 1747.0], [160.0, 1943.4375], [175.0, 882.6999999999999], [174.0, 1632.8333333333333], [173.0, 1550.7777777777778], [172.0, 1182.25], [171.0, 1606.5833333333333], [170.0, 1644.8421052631581], [169.0, 1091.8636363636365], [168.0, 1482.0000000000005], [182.0, 1324.0833333333335], [181.0, 1734.916666666667], [180.0, 1715.8666666666666], [179.0, 1876.5384615384614], [178.0, 1197.888888888889], [177.0, 1928.1111111111106], [176.0, 1770.857142857143], [183.0, 1160.0], [191.0, 1511.3749999999998], [190.0, 1861.6363636363635], [189.0, 2253.0], [188.0, 1763.4285714285716], [187.0, 1446.0], [186.0, 1448.0], [185.0, 2271.625], [184.0, 1618.7777777777778], [199.0, 1858.7142857142858], [198.0, 1534.5714285714287], [197.0, 1321.7], [196.0, 1645.8333333333335], [195.0, 1603.625], [194.0, 1993.3333333333333], [192.0, 1804.0000000000002], [193.0, 1352.3333333333335], [207.0, 2375.3333333333335], [206.0, 2228.666666666667], [205.0, 1992.8181818181818], [204.0, 1856.7692307692307], [203.0, 969.1111111111111], [202.0, 1466.0909090909092], [201.0, 1315.9230769230767], [200.0, 1693.8181818181818], [215.0, 2722.5714285714284], [214.0, 1609.8333333333333], [213.0, 1658.2857142857142], [212.0, 1566.857142857143], [211.0, 2501.0], [210.0, 1056.3750000000002], [209.0, 1781.4375000000005], [208.0, 1561.3571428571427], [223.0, 2521.3750000000005], [222.0, 1628.8000000000002], [221.0, 2602.9999999999995], [220.0, 3011.181818181818], [219.0, 1546.1], [218.0, 2388.0000000000005], [217.0, 3586.142857142857], [216.0, 2344.75], [231.0, 3383.25], [230.0, 3664.6666666666665], [229.0, 2251.0], [228.0, 1892.7142857142856], [227.0, 2865.5], [226.0, 2863.5], [225.0, 3342.8333333333335], [224.0, 3060.1249999999995], [239.0, 1292.5], [238.0, 2732.2], [237.0, 2265.857142857143], [236.0, 2708.1666666666665], [235.0, 638.75], [234.0, 3232.625], [232.0, 2034.6666666666667], [233.0, 2319.5], [247.0, 836.2], [246.0, 2751.6666666666665], [245.0, 1125.25], [244.0, 1550.8571428571427], [243.0, 2085.0], [242.0, 2096.0], [241.0, 2332.0], [240.0, 2651.6], [255.0, 2483.2], [254.0, 2162.5], [253.0, 2258.8], [252.0, 3045.8571428571427], [251.0, 1031.0], [250.0, 874.5], [249.0, 2279.0], [248.0, 870.0], [270.0, 2315.6666666666665], [271.0, 1325.6666666666667], [269.0, 4076.75], [267.0, 719.6666666666666], [268.0, 2101.0], [266.0, 2297.0], [265.0, 1807.5], [264.0, 2383.75], [263.0, 2623.428571428571], [257.0, 1797.1428571428573], [256.0, 1859.6666666666667], [259.0, 3104.0], [258.0, 1214.8333333333333], [262.0, 2073.5], [261.0, 1514.1666666666665], [260.0, 2338.25], [286.0, 1991.5], [287.0, 1222.0], [285.0, 2091.25], [284.0, 1320.0], [283.0, 1364.0769230769233], [282.0, 1564.666666666667], [281.0, 1696.142857142857], [280.0, 1321.2500000000002], [279.0, 1868.4], [273.0, 2398.5], [272.0, 1036.25], [275.0, 2065.5000000000005], [274.0, 1041.375], [278.0, 1578.4999999999998], [277.0, 1121.25], [276.0, 1566.1818181818182], [302.0, 1058.0], [303.0, 4952.0], [301.0, 1089.0], [300.0, 1276.0], [299.0, 1998.5714285714287], [298.0, 1411.6363636363637], [297.0, 1358.076923076923], [296.0, 1418.5625000000002], [295.0, 1677.5882352941176], [289.0, 1224.8571428571427], [288.0, 1355.375], [291.0, 1191.3333333333335], [290.0, 2431.6666666666665], [294.0, 1777.6666666666667], [293.0, 1085.0], [292.0, 2338.75], [318.0, 3175.0], [319.0, 5277.0], [316.0, 1239.0], [307.0, 5014.0], [306.0, 3027.5], [305.0, 2405.0], [304.0, 4977.0], [315.0, 5062.0], [314.0, 1202.0], [313.0, 5046.0], [312.0, 1200.0], [311.0, 5043.0], [310.0, 2457.3333333333335], [309.0, 1136.0], [308.0, 3085.0], [334.0, 1557.5], [335.0, 2735.0], [333.0, 3310.5], [332.0, 1505.5], [331.0, 5089.5], [330.0, 2677.333333333333], [329.0, 3280.0], [328.0, 1444.0], [327.0, 2334.5], [321.0, 1314.0], [320.0, 1296.5], [323.0, 1369.0], [322.0, 3201.0], [326.0, 1418.0], [325.0, 3235.5], [324.0, 5053.0], [350.0, 5159.0], [351.0, 1717.5], [349.0, 5169.0], [348.0, 3432.5], [347.0, 5180.0], [346.0, 1677.0], [345.0, 3443.5], [344.0, 3429.0], [343.0, 5121.0], [337.0, 5102.0], [336.0, 5105.0], [339.0, 2498.75], [338.0, 3346.0], [342.0, 5164.0], [341.0, 3403.0], [340.0, 2509.5], [366.0, 2067.5], [367.0, 2052.0], [365.0, 1996.8], [364.0, 1904.1666666666667], [363.0, 2364.5], [362.0, 1881.0], [361.0, 5119.0], [360.0, 1793.0], [359.0, 5246.5], [353.0, 5138.0], [352.0, 1734.0], [355.0, 1778.0], [354.0, 5152.0], [358.0, 3463.5], [357.0, 5144.0], [356.0, 5144.0], [382.0, 2338.0], [383.0, 5241.0], [381.0, 3769.0], [380.0, 2308.0], [379.0, 2291.25], [378.0, 5255.0], [377.0, 3247.3333333333335], [376.0, 2262.5], [374.0, 2963.5], [369.0, 3655.0], [368.0, 2087.6666666666665], [371.0, 3165.3333333333335], [370.0, 5213.0], [373.0, 2172.0], [372.0, 4214.0], [398.0, 2623.0], [399.0, 4415.333333333333], [397.0, 3950.5], [396.0, 2584.0], [395.0, 3930.5], [394.0, 2553.0], [393.0, 2508.0], [391.0, 2466.0], [385.0, 2348.0], [384.0, 3789.0], [387.0, 2391.0], [386.0, 5283.0], [390.0, 3880.0], [389.0, 3883.0], [388.0, 4344.0], [414.0, 4123.0], [415.0, 5417.0], [413.0, 3360.4], [412.0, 4086.5], [411.0, 4097.0], [409.0, 2786.0], [408.0, 2777.0], [407.0, 2737.0], [401.0, 3989.5], [403.0, 2668.0], [402.0, 2680.5], [406.0, 3622.3333333333335], [405.0, 4013.5], [404.0, 4032.0], [431.0, 5453.0], [425.0, 3273.5], [429.0, 4115.333333333333], [430.0, 3075.0], [428.0, 4277.0], [419.0, 4181.0], [418.0, 2940.6666666666665], [417.0, 3536.25], [416.0, 4158.0], [427.0, 5467.0], [426.0, 4207.5], [424.0, 5435.0], [423.0, 5468.0], [422.0, 3048.0], [421.0, 4194.0], [420.0, 2956.0], [445.0, 4412.5], [447.0, 4446.0], [442.0, 3340.0], [446.0, 4036.3333333333335], [444.0, 4793.666666666667], [435.0, 3141.0], [434.0, 3107.0], [433.0, 3930.6666666666665], [432.0, 3675.0], [441.0, 4375.5], [440.0, 3769.0], [439.0, 5954.0], [438.0, 4332.0], [437.0, 5560.5], [436.0, 5570.0], [462.0, 3470.6666666666665], [463.0, 4598.0], [461.0, 3413.0], [460.0, 3422.0], [459.0, 4559.5], [458.0, 4543.5], [457.0, 3531.3333333333335], [455.0, 5700.0], [448.0, 5625.0], [451.0, 5651.0], [450.0, 3300.0], [454.0, 5679.0], [453.0, 3919.0], [452.0, 4883.666666666667], [478.0, 5815.0], [479.0, 3685.0], [477.0, 5895.5], [476.0, 4367.833333333333], [475.0, 3669.0], [473.0, 4738.0], [472.0, 5273.25], [471.0, 4670.5], [465.0, 4617.0], [464.0, 4978.333333333333], [467.0, 3520.0], [466.0, 3534.0], [470.0, 3581.3333333333335], [469.0, 5743.5], [468.0, 4641.0], [494.0, 6026.0], [495.0, 3798.0], [493.0, 5299.333333333333], [492.0, 4963.0], [491.0, 5915.75], [490.0, 4836.5], [488.0, 3696.0], [487.0, 3777.0], [481.0, 5825.0], [480.0, 5865.0], [483.0, 3763.0], [482.0, 4741.5], [486.0, 5916.0], [485.0, 5960.0], [484.0, 3705.0], [509.0, 3778.0], [503.0, 3655.0], [510.0, 3769.0], [508.0, 3774.0], [499.0, 3790.0], [498.0, 4937.0], [497.0, 3801.6666666666665], [507.0, 5170.5], [506.0, 6318.0], [505.0, 4041.0], [504.0, 4871.0], [502.0, 3794.0], [501.0, 6067.5], [540.0, 7618.0], [519.0, 5385.333333333333], [527.0, 6032.0], [513.0, 4681.0], [512.0, 5025.0], [515.0, 6675.333333333333], [514.0, 4050.0], [517.0, 6592.0], [516.0, 7477.5], [518.0, 5997.0], [537.0, 9128.666666666666], [536.0, 6473.0], [521.0, 4955.5], [520.0, 6947.5], [523.0, 6491.0], [522.0, 6585.4], [525.0, 6577.0], [524.0, 6400.0], [526.0, 5922.333333333333], [543.0, 5745.0], [529.0, 6541.0], [528.0, 7692.0], [531.0, 7782.5], [530.0, 7594.0], [533.0, 7999.0], [532.0, 6555.0], [535.0, 4723.0], [534.0, 6775.5], [542.0, 3926.0], [541.0, 6429.0], [539.0, 3956.0], [538.0, 8291.0], [570.0, 9508.0], [548.0, 5483.0], [556.0, 4626.5], [555.0, 6499.0], [554.0, 6458.0], [553.0, 5651.0], [552.0, 6063.0], [557.0, 7486.0], [547.0, 6762.0], [545.0, 6756.0], [568.0, 7477.0], [551.0, 8944.0], [550.0, 6450.0], [549.0, 7819.0], [573.0, 5739.5], [575.0, 6378.0], [567.0, 7571.5], [566.0, 6959.0], [564.0, 5897.333333333333], [563.0, 5787.0], [562.0, 6431.0], [561.0, 7025.0], [560.0, 6420.25], [574.0, 6341.0], [572.0, 5387.0], [569.0, 7896.666666666667], [601.0, 6523.333333333333], [606.0, 6118.0], [603.0, 5281.0], [591.0, 6198.5], [578.0, 7095.5], [576.0, 5969.0], [581.0, 7929.0], [580.0, 7937.333333333333], [583.0, 6916.0], [582.0, 9485.0], [590.0, 7800.0], [589.0, 5954.0], [588.0, 6946.333333333333], [587.0, 7356.0], [586.0, 5947.0], [585.0, 3997.0], [584.0, 6318.0], [604.0, 6536.5], [607.0, 7926.5], [593.0, 6340.0], [592.0, 3984.0], [595.0, 4029.0], [594.0, 6019.0], [597.0, 8098.0], [596.0, 8005.0], [605.0, 7191.0], [602.0, 4063.0], [599.0, 8303.0], [598.0, 9330.0], [633.0, 5531.333333333333], [626.0, 6398.0], [627.0, 6528.0], [629.0, 8174.0], [628.0, 4819.0], [625.0, 6686.2], [623.0, 6456.0], [613.0, 6473.5], [612.0, 7446.5], [610.0, 6815.0], [609.0, 7834.0], [608.0, 7658.0], [632.0, 6507.0], [615.0, 5036.0], [621.0, 5988.0], [620.0, 4087.0], [619.0, 7795.0], [618.0, 5594.5], [617.0, 7229.0], [616.0, 7104.333333333333], [622.0, 4060.5], [624.0, 7159.0], [631.0, 6238.0], [630.0, 6020.666666666667], [634.0, 6968.0], [636.0, 4168.0], [635.0, 8708.5], [638.0, 4203.0], [637.0, 8877.0], [639.0, 8644.0], [642.0, 4709.5], [641.0, 5565.909090909091], [640.0, 4206.333333333333], [655.0, 4696.5], [654.0, 4673.0], [647.0, 6561.666666666667], [646.0, 5073.5], [645.0, 6315.0], [644.0, 4367.166666666667], [643.0, 5901.375], [653.0, 5244.0], [652.0, 5047.857142857142], [651.0, 5719.2], [650.0, 5623.25], [649.0, 5250.8], [648.0, 5600.0], [660.0, 5840.0], [659.0, 4891.0], [658.0, 4826.0], [657.0, 4858.0], [656.0, 5062.0], [663.0, 5068.5], [662.0, 4653.5], [671.0, 5166.5], [670.0, 5337.5], [668.0, 5424.0], [666.0, 6254.0], [665.0, 4743.5], [664.0, 5053.0], [669.0, 5847.0], [701.0, 5256.0], [673.0, 6117.0], [686.0, 5768.5], [672.0, 4860.0], [685.0, 6909.0], [684.0, 6097.5], [683.0, 8484.0], [682.0, 5505.0], [681.0, 5998.2], [695.0, 5846.5], [694.0, 5322.0], [693.0, 6747.333333333333], [692.0, 5347.0], [691.0, 5663.25], [688.0, 6016.333333333333], [703.0, 6755.0], [702.0, 6757.0], [700.0, 5162.0], [699.0, 5751.0], [697.0, 5832.0], [696.0, 5288.0], [677.0, 5649.5], [676.0, 4914.0], [675.0, 5361.0], [674.0, 6358.5], [731.0, 5979.0], [717.0, 7576.5], [716.0, 4767.0], [715.0, 5127.0], [714.0, 7335.0], [713.0, 5117.0], [712.0, 6842.0], [718.0, 6521.0], [735.0, 6881.0], [721.0, 5643.0], [720.0, 8255.0], [723.0, 6338.0], [722.0, 6791.0], [725.0, 7189.0], [724.0, 7360.0], [734.0, 5063.0], [733.0, 7097.0], [730.0, 6234.0], [729.0, 7546.0], [719.0, 5315.25], [705.0, 5427.0], [704.0, 5199.333333333333], [707.0, 7168.666666666667], [706.0, 6984.0], [709.0, 7353.0], [708.0, 8286.0], [711.0, 6045.0], [710.0, 5785.5], [727.0, 5827.0], [726.0, 6714.0], [741.0, 6862.0], [737.0, 6597.333333333333], [738.0, 7169.0], [736.0, 6574.0], [742.0, 7107.25], [740.0, 7465.0], [739.0, 7115.0], [743.0, 5984.333333333333], [749.0, 6323.333333333333], [747.0, 5895.0], [746.0, 7906.0], [745.0, 6968.5], [744.0, 6354.0], [750.0, 6513.5], [751.0, 4990.0], [757.0, 6997.5], [760.0, 7575.0], [754.0, 5190.0], [753.0, 7406.5], [752.0, 6989.333333333333], [756.0, 7518.5], [755.0, 7358.0], [758.0, 7105.181818181818], [759.0, 5989.5], [1.0, 202.0]], "isOverall": false, "label": "getProfile", "isController": false}, {"data": [[24.484630000000127, 226.4661799999983]], "isOverall": false, "label": "getProfile-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 760.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9928.75, "minX": 1.64091522E12, "maxY": 1100802.0666666667, "series": [{"data": [[1.6409154E12, 1069790.85], [1.64091606E12, 1070137.2], [1.640916E12, 1069063.6166666667], [1.6409157E12, 1069817.8], [1.64091612E12, 1069953.0833333333], [1.64091582E12, 1069787.3], [1.64091576E12, 1069605.9333333333], [1.64091546E12, 1069607.1666666667], [1.64091588E12, 1070484.3333333333], [1.64091558E12, 1069785.7333333334], [1.64091552E12, 1066222.4666666666], [1.64091618E12, 1068891.0666666667], [1.64091522E12, 209534.56666666668], [1.64091564E12, 1073175.75], [1.64091534E12, 1069974.1666666667], [1.64091624E12, 473193.8333333333], [1.64091528E12, 1100802.0666666667], [1.64091594E12, 1069953.0333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6409154E12, 50700.0], [1.64091606E12, 50716.9], [1.640916E12, 50666.2], [1.6409157E12, 50700.0], [1.64091612E12, 50708.45], [1.64091582E12, 50700.0], [1.64091576E12, 50691.55], [1.64091546E12, 50691.55], [1.64091588E12, 50733.8], [1.64091558E12, 50700.0], [1.64091552E12, 50531.0], [1.64091618E12, 50657.75], [1.64091522E12, 9928.75], [1.64091564E12, 50860.55], [1.64091534E12, 50708.45], [1.64091624E12, 22426.3], [1.64091528E12, 52170.3], [1.64091594E12, 50708.45]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64091624E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 117.16413931011482, "minX": 1.64091522E12, "maxY": 4508.5344680851, "series": [{"data": [[1.6409154E12, 156.78616666666673], [1.64091606E12, 143.12095968010672], [1.640916E12, 129.99049366244137], [1.6409157E12, 381.64549999999974], [1.64091612E12, 117.16413931011482], [1.64091582E12, 167.33349999999947], [1.64091576E12, 124.7671278546422], [1.64091546E12, 201.39423237206145], [1.64091588E12, 125.68154563624273], [1.64091558E12, 193.69416666666638], [1.64091552E12, 175.3414715719066], [1.64091618E12, 118.0673894912428], [1.64091522E12, 4508.5344680851], [1.64091564E12, 206.42448911779422], [1.64091534E12, 234.4280953174461], [1.64091624E12, 118.16428033157497], [1.64091528E12, 231.39018464528647], [1.64091594E12, 125.26645559073522]], "isOverall": false, "label": "getProfile", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64091624E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 117.0803199466754, "minX": 1.64091522E12, "maxY": 4508.2578723404295, "series": [{"data": [[1.6409154E12, 156.66416666666694], [1.64091606E12, 143.0326557814065], [1.640916E12, 129.89476317545075], [1.6409157E12, 374.910833333334], [1.64091612E12, 117.0803199466754], [1.64091582E12, 166.77749999999892], [1.64091576E12, 124.55642607101213], [1.64091546E12, 201.2865477579596], [1.64091588E12, 125.55696202531637], [1.64091558E12, 193.54899999999975], [1.64091552E12, 175.1596989966547], [1.64091618E12, 117.99833194328608], [1.64091522E12, 4508.2578723404295], [1.64091564E12, 206.2784515700284], [1.64091534E12, 234.32244625895754], [1.64091624E12, 118.08553127354958], [1.64091528E12, 231.29786200194363], [1.64091594E12, 125.16547242126296]], "isOverall": false, "label": "getProfile", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64091624E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 39.49708090075076, "minX": 1.64091522E12, "maxY": 659.8902127659568, "series": [{"data": [[1.6409154E12, 49.143500000000046], [1.64091606E12, 45.397200933022255], [1.640916E12, 44.53535690460315], [1.6409157E12, 54.4041666666667], [1.64091612E12, 39.870021663056114], [1.64091582E12, 47.24133333333329], [1.64091576E12, 42.15785964327385], [1.64091546E12, 57.53625604267376], [1.64091588E12, 43.264157228514385], [1.64091558E12, 55.497000000000035], [1.64091552E12, 53.473578595317896], [1.64091618E12, 39.49708090075076], [1.64091522E12, 659.8902127659568], [1.64091564E12, 58.04768233925898], [1.64091534E12, 73.40859856690575], [1.64091624E12, 39.62999246420492], [1.64091528E12, 45.688208616779995], [1.64091594E12, 43.16147308781872]], "isOverall": false, "label": "getProfile", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64091624E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 91.0, "minX": 1.64091522E12, "maxY": 60381.0, "series": [{"data": [[1.6409154E12, 1999.0], [1.64091606E12, 60381.0], [1.640916E12, 489.0], [1.6409157E12, 4790.0], [1.64091612E12, 1259.0], [1.64091582E12, 3602.0], [1.64091576E12, 2267.0], [1.64091546E12, 5694.0], [1.64091588E12, 625.0], [1.64091558E12, 1206.0], [1.64091552E12, 1188.0], [1.64091618E12, 488.0], [1.64091522E12, 9628.0], [1.64091564E12, 1265.0], [1.64091534E12, 5339.0], [1.64091624E12, 1740.0], [1.64091528E12, 3679.0], [1.64091594E12, 475.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6409154E12, 250.0], [1.64091606E12, 162.0], [1.640916E12, 166.0], [1.6409157E12, 1193.0], [1.64091612E12, 131.0], [1.64091582E12, 206.0], [1.64091576E12, 142.0], [1.64091546E12, 373.0], [1.64091588E12, 152.0], [1.64091558E12, 347.0], [1.64091552E12, 304.0], [1.64091618E12, 133.0], [1.64091522E12, 7414.800000000001], [1.64091564E12, 374.0], [1.64091534E12, 356.0], [1.64091624E12, 132.0], [1.64091528E12, 230.0], [1.64091594E12, 154.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6409154E12, 567.9899999999998], [1.64091606E12, 411.9400000000005], [1.640916E12, 268.0599999999995], [1.6409157E12, 2471.6999999999935], [1.64091612E12, 189.0], [1.64091582E12, 1036.9799999999996], [1.64091576E12, 339.0], [1.64091546E12, 877.0], [1.64091588E12, 307.6999999999989], [1.64091558E12, 733.0], [1.64091552E12, 600.5699999999988], [1.64091618E12, 204.07999999999993], [1.64091522E12, 9231.2], [1.64091564E12, 676.0], [1.64091534E12, 1823.9799999999996], [1.64091624E12, 201.89999999999964], [1.64091528E12, 3072.5], [1.64091594E12, 281.91999999999825]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6409154E12, 338.9499999999998], [1.64091606E12, 189.0], [1.640916E12, 196.0], [1.6409157E12, 1563.9499999999998], [1.64091612E12, 144.0], [1.64091582E12, 398.7999999999993], [1.64091576E12, 178.0], [1.64091546E12, 485.0], [1.64091588E12, 189.0], [1.64091558E12, 457.0], [1.64091552E12, 386.9499999999998], [1.64091618E12, 147.0], [1.64091522E12, 8121.600000000001], [1.64091564E12, 502.0], [1.64091534E12, 958.5999999999985], [1.64091624E12, 145.0], [1.64091528E12, 542.75], [1.64091594E12, 187.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6409154E12, 93.0], [1.64091606E12, 93.0], [1.640916E12, 95.0], [1.6409157E12, 93.0], [1.64091612E12, 93.0], [1.64091582E12, 92.0], [1.64091576E12, 93.0], [1.64091546E12, 94.0], [1.64091588E12, 93.0], [1.64091558E12, 94.0], [1.64091552E12, 93.0], [1.64091618E12, 91.0], [1.64091522E12, 106.0], [1.64091564E12, 91.0], [1.64091534E12, 95.0], [1.64091624E12, 95.0], [1.64091528E12, 94.0], [1.64091594E12, 92.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6409154E12, 121.0], [1.64091606E12, 120.0], [1.640916E12, 120.0], [1.6409157E12, 120.0], [1.64091612E12, 113.0], [1.64091582E12, 117.0], [1.64091576E12, 115.0], [1.64091546E12, 132.0], [1.64091588E12, 115.0], [1.64091558E12, 139.0], [1.64091552E12, 129.0], [1.64091618E12, 114.0], [1.64091522E12, 4777.0], [1.64091564E12, 149.0], [1.64091534E12, 122.0], [1.64091624E12, 114.0], [1.64091528E12, 119.0], [1.64091594E12, 116.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64091624E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 108.0, "minX": 4.0, "maxY": 6036.0, "series": [{"data": [[4.0, 3490.0], [9.0, 4763.0], [10.0, 1385.5], [14.0, 5611.5], [20.0, 5946.5], [23.0, 123.0], [33.0, 117.0], [37.0, 1764.0], [43.0, 305.0], [44.0, 906.0], [47.0, 119.0], [49.0, 108.0], [55.0, 331.0], [58.0, 134.0], [60.0, 245.0], [62.0, 147.5], [65.0, 300.5], [66.0, 149.5], [67.0, 121.5], [74.0, 121.5], [75.0, 114.0], [73.0, 111.0], [77.0, 348.0], [78.0, 265.0], [76.0, 170.5], [82.0, 115.0], [81.0, 158.0], [83.0, 129.0], [86.0, 147.0], [87.0, 127.0], [84.0, 120.0], [85.0, 118.0], [90.0, 117.0], [91.0, 126.0], [88.0, 179.0], [89.0, 130.5], [95.0, 119.0], [93.0, 116.0], [94.0, 123.0], [92.0, 116.0], [98.0, 117.0], [99.0, 117.0], [97.0, 118.0], [96.0, 120.0], [102.0, 118.0], [101.0, 116.0], [103.0, 117.0], [100.0, 115.0], [104.0, 121.0], [105.0, 120.0], [106.0, 118.0], [107.0, 125.0], [111.0, 126.0], [108.0, 122.0], [110.0, 121.0], [109.0, 118.0], [115.0, 136.0], [113.0, 122.0], [114.0, 163.0], [112.0, 125.0], [118.0, 121.0], [119.0, 132.0], [116.0, 133.0], [122.0, 225.5], [121.0, 209.5], [120.0, 200.5], [126.0, 145.5], [125.0, 216.5], [128.0, 232.0], [129.0, 203.0], [139.0, 3026.0], [143.0, 422.0], [136.0, 228.5], [145.0, 1268.0], [157.0, 747.0], [153.0, 198.0], [159.0, 1560.0], [154.0, 285.0], [167.0, 3890.0], [163.0, 1945.0], [178.0, 921.0], [179.0, 436.0], [193.0, 1444.0], [200.0, 5237.0], [205.0, 3006.0], [203.0, 377.0], [208.0, 756.5], [229.0, 1631.0], [233.0, 1013.0], [254.0, 1077.5], [277.0, 6036.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 277.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 108.0, "minX": 4.0, "maxY": 6035.0, "series": [{"data": [[4.0, 3402.5], [9.0, 4763.0], [10.0, 1366.0], [14.0, 5611.5], [20.0, 5946.5], [23.0, 120.0], [33.0, 117.0], [37.0, 1764.0], [43.0, 305.0], [44.0, 906.0], [47.0, 118.0], [49.0, 108.0], [55.0, 324.0], [58.0, 134.0], [60.0, 245.0], [62.0, 147.0], [65.0, 300.5], [66.0, 149.5], [67.0, 121.5], [74.0, 121.5], [75.0, 114.0], [73.0, 111.0], [77.0, 348.0], [78.0, 265.0], [76.0, 170.5], [82.0, 115.0], [81.0, 158.0], [83.0, 129.0], [86.0, 147.0], [87.0, 127.0], [84.0, 120.0], [85.0, 118.0], [90.0, 116.0], [91.0, 126.0], [88.0, 178.5], [89.0, 130.5], [95.0, 119.0], [93.0, 116.0], [94.0, 123.0], [92.0, 115.0], [98.0, 117.0], [99.0, 117.0], [97.0, 118.0], [96.0, 120.0], [102.0, 118.0], [101.0, 116.0], [103.0, 117.0], [100.0, 115.0], [104.0, 121.0], [105.0, 120.0], [106.0, 118.0], [107.0, 125.0], [111.0, 126.0], [108.0, 122.0], [110.0, 121.0], [109.0, 118.0], [115.0, 136.0], [113.0, 122.0], [114.0, 163.0], [112.0, 125.0], [118.0, 121.0], [119.0, 132.0], [116.0, 133.0], [122.0, 225.5], [121.0, 209.5], [120.0, 200.0], [126.0, 145.5], [125.0, 216.0], [128.0, 232.0], [129.0, 203.0], [139.0, 3026.0], [143.0, 422.0], [136.0, 228.5], [145.0, 1268.0], [157.0, 746.0], [153.0, 198.0], [159.0, 1560.0], [154.0, 285.0], [167.0, 3890.0], [163.0, 1945.0], [178.0, 921.0], [179.0, 436.0], [193.0, 1444.0], [200.0, 5237.0], [205.0, 3006.0], [203.0, 376.0], [208.0, 756.5], [229.0, 1631.0], [233.0, 1013.0], [254.0, 1077.5], [277.0, 6035.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 277.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 22.7, "minX": 1.64091522E12, "maxY": 100.2, "series": [{"data": [[1.6409154E12, 100.0], [1.64091606E12, 99.98333333333333], [1.640916E12, 100.0], [1.6409157E12, 100.0], [1.64091612E12, 100.01666666666667], [1.64091582E12, 100.0], [1.64091576E12, 99.96666666666667], [1.64091546E12, 100.0], [1.64091588E12, 100.05], [1.64091558E12, 100.2], [1.64091552E12, 99.7], [1.64091618E12, 99.93333333333334], [1.64091522E12, 22.7], [1.64091564E12, 100.08333333333333], [1.64091534E12, 100.0], [1.64091624E12, 44.03333333333333], [1.64091528E12, 100.0], [1.64091594E12, 100.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64091624E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 19.583333333333332, "minX": 1.64091522E12, "maxY": 102.9, "series": [{"data": [[1.6409154E12, 100.0], [1.64091606E12, 100.03333333333333], [1.640916E12, 99.93333333333334], [1.6409157E12, 100.0], [1.64091612E12, 100.01666666666667], [1.64091582E12, 100.0], [1.64091576E12, 99.98333333333333], [1.64091546E12, 99.98333333333333], [1.64091588E12, 100.06666666666666], [1.64091558E12, 100.0], [1.64091552E12, 99.66666666666667], [1.64091618E12, 99.91666666666667], [1.64091522E12, 19.583333333333332], [1.64091564E12, 100.31666666666666], [1.64091534E12, 100.01666666666667], [1.64091624E12, 44.233333333333334], [1.64091528E12, 102.9], [1.64091594E12, 100.01666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64091624E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 19.583333333333332, "minX": 1.64091522E12, "maxY": 102.9, "series": [{"data": [[1.6409154E12, 100.0], [1.64091606E12, 100.03333333333333], [1.640916E12, 99.93333333333334], [1.6409157E12, 100.0], [1.64091612E12, 100.01666666666667], [1.64091582E12, 100.0], [1.64091576E12, 99.98333333333333], [1.64091546E12, 99.98333333333333], [1.64091588E12, 100.06666666666666], [1.64091558E12, 100.0], [1.64091552E12, 99.66666666666667], [1.64091618E12, 99.91666666666667], [1.64091522E12, 19.583333333333332], [1.64091564E12, 100.31666666666666], [1.64091534E12, 100.01666666666667], [1.64091624E12, 44.233333333333334], [1.64091528E12, 102.9], [1.64091594E12, 100.01666666666667]], "isOverall": false, "label": "getProfile-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64091624E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 19.583333333333332, "minX": 1.64091522E12, "maxY": 102.9, "series": [{"data": [[1.6409154E12, 100.0], [1.64091606E12, 100.03333333333333], [1.640916E12, 99.93333333333334], [1.6409157E12, 100.0], [1.64091612E12, 100.01666666666667], [1.64091582E12, 100.0], [1.64091576E12, 99.98333333333333], [1.64091546E12, 99.98333333333333], [1.64091588E12, 100.06666666666666], [1.64091558E12, 100.0], [1.64091552E12, 99.66666666666667], [1.64091618E12, 99.91666666666667], [1.64091522E12, 19.583333333333332], [1.64091564E12, 100.31666666666666], [1.64091534E12, 100.01666666666667], [1.64091624E12, 44.233333333333334], [1.64091528E12, 102.9], [1.64091594E12, 100.01666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64091624E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

